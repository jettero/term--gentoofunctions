=head1 NAME

Term::GentooFunctions - provides gentoo's einfo, ewarn, eerror, ebegin and eend.

=head1 SYNOPSIS

    use Term::GentooFunctions qw(:all)

    einfo "this is kinda neat...";

    ebegin "I hope this works...";
     ....
    eend $truefalse; # the result is backwards of gentoo; ie, 0 is bad, 1 is good.

=head1 prints

C<einfo>, C<ewarn>, and error show informative lines.

=head1 ebegin and eend

C<ebegin> and C<eend> show the beginning and ends of things.

Additionally, C<eend> returns the result passed in for handy returns at the bottom of functions...

    sub eg {
        eend 0; # eg now returns a false!!  Huzzah!
    }

Lastly, C<eend> will use C<$_> if it is not passed any arguments.

=head1 indents

You can also use C<eindent> and C<eoutdent> to show trees of things happening:

    einfo "something"
    eindent 
    einfo "something else" # indented
    eoutdent
    einfo "something else (again)" # un-dented

=head1 bash

L<Term::GentooFunctions> will use C<RC_INDENTATION> and C<RC_DEFAULT_INDENT>
from Gentoo's /sbin/functions.sh.  So you can C<eindent> in a bash_script.sh and
your perl_script.pl will use the indent level!  However, to get it to work you
must first export them to your perl scripts:

    export RC_INDENTATION RC_DEFAULT_INDENT 
    
L<Term::GentooFunctions> will not be able to modify the indent level in a way
that will propagate back up to bash -- that would technically be impossible
through environment variables.

=head1 AUTHOR

Paul Miller C<< <jettero@cpan.org> >>

I am using this software in my own projects...  If you find bugs, please
please please let me know. :) Actually, let me know if you find it handy at
all.  Half the fun of releasing this stuff is knowing that people use it.

=head1 COPYRIGHT

Copyright (c) 2007-2009 Paul Miller

=head1 SEE ALSO

L<Term::Size>, L<Term::ANSIColor>, L<Term::ANSIScreen>
